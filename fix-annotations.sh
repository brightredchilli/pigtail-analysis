#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([outfile],[o],[Name of zip file],[updated-annotations.zip])
# ARG_POSITIONAL_SINGLE([directory_name],[directory name to look for annotation files],[])
# ARG_HELP([Given a directory, clean up the annotations in it and generate a zipfile])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='oh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_outfile="updated-annotations.zip"


print_help()
{
	printf '%s\n' "Given a directory, clean up the annotations in it and generate a zipfile"
	printf 'Usage: %s [-o|--outfile <arg>] [-h|--help] <directory_name>\n' "$0"
	printf '\t%s\n' "<directory_name>: directory name to look for annotation files"
	printf '\t%s\n' "-o, --outfile: Name of zip file (default: 'updated-annotations.zip')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-o|--outfile)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_outfile="$2"
				shift
				;;
			--outfile=*)
				_arg_outfile="${_key##--outfile=}"
				;;
			-o*)
				_arg_outfile="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'directory_name'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_directory_name "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])

echo "Using directory: $_arg_directory_name"


sed -i "" -E 's/^15/0/' $_arg_directory_name/*_*.txt

echo "tarring file: $_arg_outfile"

cd $_arg_directory_name

tar -cvf tmp.zip *_*.txt

cd ..

mv $_arg_directory_name/tmp.zip $_arg_outfile
